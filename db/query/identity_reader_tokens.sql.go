// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: identity_reader_tokens.sql

package query

import (
	"context"
)

const createReaderToken = `-- name: CreateReaderToken :one
insert into identity.reader_tokens (user_id, identifier)
  values ($1, $2)
  returning id, uuid, created_at, updated_at, user_id, identifier, revoked_at
`

type CreateReaderTokenParams struct {
	UserID     int64  `json:"user_id"`
	Identifier string `json:"identifier"`
}

func (q *Queries) CreateReaderToken(ctx context.Context, arg CreateReaderTokenParams) (IdentityReaderToken, error) {
	row := q.db.QueryRowContext(ctx, createReaderToken, arg.UserID, arg.Identifier)
	var i IdentityReaderToken
	err := row.Scan(
		&i.ID,
		&i.UUID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Identifier,
		&i.RevokedAt,
	)
	return i, err
}

const getReaderTokenByIdentifier = `-- name: GetReaderTokenByIdentifier :one
select id, uuid, created_at, updated_at, user_id, identifier, revoked_at from identity.reader_tokens where identifier = $1
`

func (q *Queries) GetReaderTokenByIdentifier(ctx context.Context, identifier string) (IdentityReaderToken, error) {
	row := q.db.QueryRowContext(ctx, getReaderTokenByIdentifier, identifier)
	var i IdentityReaderToken
	err := row.Scan(
		&i.ID,
		&i.UUID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Identifier,
		&i.RevokedAt,
	)
	return i, err
}
