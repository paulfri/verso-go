// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package query

import (
	"context"
	"database/sql"
)

const createToken = `-- name: CreateToken :one
insert into identity.tokens (user_id, identifier) values ($1, $2) returning id, uuid, created_at, updated_at, user_id, identifier, revoked_at
`

type CreateTokenParams struct {
	UserID     int64  `json:"user_id"`
	Identifier string `json:"identifier"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (IdentityToken, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.UserID, arg.Identifier)
	var i IdentityToken
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Identifier,
		&i.RevokedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into identity.users (
  email,
  name,
  password,
  superuser
) values ($1, $2, $3, $4) returning id, uuid, created_at, updated_at, email, name, password, superuser
`

type CreateUserParams struct {
	Email     string         `json:"email"`
	Name      string         `json:"name"`
	Password  sql.NullString `json:"password"`
	Superuser bool           `json:"superuser"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (IdentityUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.Superuser,
	)
	var i IdentityUser
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Superuser,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, uuid, created_at, updated_at, email, name, password, superuser from identity.users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (IdentityUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i IdentityUser
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Superuser,
	)
	return i, err
}
