// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queue_items.sql

package query

import (
	"context"
	"database/sql"
	"time"
)

const createQueueItem = `-- name: CreateQueueItem :one
insert into queue.items (user_id, rss_item_id)
  values ($1, $2)
  on conflict do nothing
  returning id, uuid, created_at, updated_at, unread, user_id, rss_item_id
`

type CreateQueueItemParams struct {
	UserID    int64         `json:"user_id"`
	RSSItemID sql.NullInt64 `json:"rss_item_id"`
}

func (q *Queries) CreateQueueItem(ctx context.Context, arg CreateQueueItemParams) (QueueItem, error) {
	row := q.db.QueryRowContext(ctx, createQueueItem, arg.UserID, arg.RSSItemID)
	var i QueueItem
	err := row.Scan(
		&i.ID,
		&i.UUID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Unread,
		&i.UserID,
		&i.RSSItemID,
	)
	return i, err
}

const getQueueItemsByUserID = `-- name: GetQueueItemsByUserID :many
select
    qi.id,
    qi.created_at,
    qi.unread,
    ri.feed_id,
    ri.title,
    ri.rss_guid,
    ri.link,
    ri.author,
    ri.content,
    ri.summary,
    ri.published_at,
    ri.remote_updated_at
  from rss.items ri
  join queue.items qi on qi.rss_item_id = ri.id
  where qi.user_id = $1 
  order by ri.published_at desc
  limit $2
`

type GetQueueItemsByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
}

type GetQueueItemsByUserIDRow struct {
	ID              int64          `json:"id"`
	CreatedAt       time.Time      `json:"created_at"`
	Unread          bool           `json:"unread"`
	FeedID          int64          `json:"feed_id"`
	Title           string         `json:"title"`
	RSSGuid         string         `json:"rss_guid"`
	Link            string         `json:"link"`
	Author          sql.NullString `json:"author"`
	Content         string         `json:"content"`
	Summary         sql.NullString `json:"summary"`
	PublishedAt     sql.NullTime   `json:"published_at"`
	RemoteUpdatedAt sql.NullTime   `json:"remote_updated_at"`
}

func (q *Queries) GetQueueItemsByUserID(ctx context.Context, arg GetQueueItemsByUserIDParams) ([]GetQueueItemsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getQueueItemsByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQueueItemsByUserIDRow
	for rows.Next() {
		var i GetQueueItemsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Unread,
			&i.FeedID,
			&i.Title,
			&i.RSSGuid,
			&i.Link,
			&i.Author,
			&i.Content,
			&i.Summary,
			&i.PublishedAt,
			&i.RemoteUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
