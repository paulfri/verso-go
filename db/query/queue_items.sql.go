// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queue_items.sql

package query

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createQueueItem = `-- name: CreateQueueItem :one
insert into queue.items (user_id, rss_item_id)
  values ($1, $2)
  on conflict do nothing
  returning id, uuid, created_at, updated_at, user_id, unread, starred, rss_item_id
`

type CreateQueueItemParams struct {
	UserID    int64         `json:"user_id"`
	RSSItemID sql.NullInt64 `json:"rss_item_id"`
}

func (q *Queries) CreateQueueItem(ctx context.Context, arg CreateQueueItemParams) (QueueItem, error) {
	row := q.db.QueryRowContext(ctx, createQueueItem, arg.UserID, arg.RSSItemID)
	var i QueueItem
	err := row.Scan(
		&i.ID,
		&i.UUID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Unread,
		&i.Starred,
		&i.RSSItemID,
	)
	return i, err
}

const getQueueItemsByReaderIDs = `-- name: GetQueueItemsByReaderIDs :many
select ri.id, ri.uuid, ri.created_at, ri.updated_at, ri.feed_id, ri.rss_guid, ri.title, ri.link, ri.author, ri.author_email, ri.content, ri.summary, ri.published_at, ri.remote_updated_at, ri.reader_id
  from rss.items ri
  join queue.items qi on qi.rss_item_id = ri.id
  where ri.id = any($1::bigint[])
  order by ri.published_at desc
`

func (q *Queries) GetQueueItemsByReaderIDs(ctx context.Context, dollar_1 []int64) ([]RSSItem, error) {
	rows, err := q.db.QueryContext(ctx, getQueueItemsByReaderIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RSSItem
	for rows.Next() {
		var i RSSItem
		if err := rows.Scan(
			&i.ID,
			&i.UUID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.RSSGuid,
			&i.Title,
			&i.Link,
			&i.Author,
			&i.AuthorEmail,
			&i.Content,
			&i.Summary,
			&i.PublishedAt,
			&i.RemoteUpdatedAt,
			&i.ReaderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQueueItemsByUserID = `-- name: GetQueueItemsByUserID :many
select ri.id, ri.uuid, ri.created_at, ri.updated_at, ri.feed_id, ri.rss_guid, ri.title, ri.link, ri.author, ri.author_email, ri.content, ri.summary, ri.published_at, ri.remote_updated_at, ri.reader_id
  from rss.items ri
  join queue.items qi on qi.rss_item_id = ri.id
  where qi.user_id = $1 
  order by ri.published_at desc
  limit $2
`

type GetQueueItemsByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetQueueItemsByUserID(ctx context.Context, arg GetQueueItemsByUserIDParams) ([]RSSItem, error) {
	rows, err := q.db.QueryContext(ctx, getQueueItemsByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RSSItem
	for rows.Next() {
		var i RSSItem
		if err := rows.Scan(
			&i.ID,
			&i.UUID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.RSSGuid,
			&i.Title,
			&i.Link,
			&i.Author,
			&i.AuthorEmail,
			&i.Content,
			&i.Summary,
			&i.PublishedAt,
			&i.RemoteUpdatedAt,
			&i.ReaderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllQueueItemsAsRead = `-- name: MarkAllQueueItemsAsRead :exec
update queue.items qi
  set unread = false
  where exists (
    select ri.id, ri.uuid, ri.created_at, ri.updated_at, feed_id, rss_guid, ri.title, link, author, author_email, content, summary, published_at, remote_updated_at, reader_id, rf.id, rf.uuid, rf.created_at, rf.updated_at, rf.title, url, active, last_crawled_at 
    from rss.items ri
      join rss.feeds rf on rf.id = ri.feed_id
    where
      qi.rss_item_id = ri.id
      and qi.user_id = $1
      and rf.url = coalesce(nullif($2,''), rf.url)
      and ri.published_at <= coalesce($3, now())
  )
`

type MarkAllQueueItemsAsReadParams struct {
	UserID          int64        `json:"user_id"`
	RSSFeedURL      interface{}  `json:"rss_feed_url"`
	PublishedBefore sql.NullTime `json:"published_before"`
}

func (q *Queries) MarkAllQueueItemsAsRead(ctx context.Context, arg MarkAllQueueItemsAsReadParams) error {
	_, err := q.db.ExecContext(ctx, markAllQueueItemsAsRead, arg.UserID, arg.RSSFeedURL, arg.PublishedBefore)
	return err
}
