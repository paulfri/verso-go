// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queue_items.sql

package query

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createQueueItem = `-- name: CreateQueueItem :one
insert into queue.items (user_id, rss_item_id)
  values ($1, $2)
  on conflict do nothing
  returning id, uuid, created_at, updated_at, user_id, rss_item_id, unread
`

type CreateQueueItemParams struct {
	UserID    int64         `json:"user_id"`
	RSSItemID sql.NullInt64 `json:"rss_item_id"`
}

func (q *Queries) CreateQueueItem(ctx context.Context, arg CreateQueueItemParams) (QueueItem, error) {
	row := q.db.QueryRowContext(ctx, createQueueItem, arg.UserID, arg.RSSItemID)
	var i QueueItem
	err := row.Scan(
		&i.ID,
		&i.UUID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.RSSItemID,
		&i.Unread,
	)
	return i, err
}

const getQueueItemsByUserID = `-- name: GetQueueItemsByUserID :many
select ri.id, ri.uuid, ri.created_at, ri.updated_at, feed_id, rss_guid, title, link, content, published_at, remote_updated_at, qi.id, qi.uuid, qi.created_at, qi.updated_at, user_id, rss_item_id, unread from rss.items ri
  join queue.items qi on qi.rss_item_id = ri.id
  where qi.user_id = $1 
  order by ri.published_at desc
  limit $2
`

type GetQueueItemsByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
}

type GetQueueItemsByUserIDRow struct {
	ID              int64         `json:"id"`
	UUID            uuid.UUID     `json:"uuid"`
	CreatedAt       time.Time     `json:"created_at"`
	UpdatedAt       time.Time     `json:"updated_at"`
	FeedID          int64         `json:"feed_id"`
	RSSGuid         string        `json:"rss_guid"`
	Title           string        `json:"title"`
	Link            string        `json:"link"`
	Content         string        `json:"content"`
	PublishedAt     sql.NullTime  `json:"published_at"`
	RemoteUpdatedAt sql.NullTime  `json:"remote_updated_at"`
	ID_2            int64         `json:"id_2"`
	UUID_2          uuid.UUID     `json:"uuid_2"`
	CreatedAt_2     time.Time     `json:"created_at_2"`
	UpdatedAt_2     time.Time     `json:"updated_at_2"`
	UserID          int64         `json:"user_id"`
	RSSItemID       sql.NullInt64 `json:"rss_item_id"`
	Unread          bool          `json:"unread"`
}

func (q *Queries) GetQueueItemsByUserID(ctx context.Context, arg GetQueueItemsByUserIDParams) ([]GetQueueItemsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getQueueItemsByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQueueItemsByUserIDRow
	for rows.Next() {
		var i GetQueueItemsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UUID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.RSSGuid,
			&i.Title,
			&i.Link,
			&i.Content,
			&i.PublishedAt,
			&i.RemoteUpdatedAt,
			&i.ID_2,
			&i.UUID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.UserID,
			&i.RSSItemID,
			&i.Unread,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
