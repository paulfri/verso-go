// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: rss_feeds.sql

package query

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createQueueItem = `-- name: CreateQueueItem :one
insert into content.queue_items (user_id, rss_item_id)
  values ($1, $2)
  on conflict do nothing
  returning id, uuid, created_at, updated_at, user_id, rss_item_id, is_read
`

type CreateQueueItemParams struct {
	UserID    int64         `json:"user_id"`
	RssItemID sql.NullInt64 `json:"rss_item_id"`
}

func (q *Queries) CreateQueueItem(ctx context.Context, arg CreateQueueItemParams) (ContentQueueItem, error) {
	row := q.db.QueryRowContext(ctx, createQueueItem, arg.UserID, arg.RssItemID)
	var i ContentQueueItem
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.RssItemID,
		&i.IsRead,
	)
	return i, err
}

const createRssFeed = `-- name: CreateRssFeed :one
insert into content.rss_feeds (title, url) values ($1, $2) returning id, uuid, created_at, updated_at, title, url, active, last_crawled_at
`

type CreateRssFeedParams struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

func (q *Queries) CreateRssFeed(ctx context.Context, arg CreateRssFeedParams) (ContentRssFeed, error) {
	row := q.db.QueryRowContext(ctx, createRssFeed, arg.Title, arg.Url)
	var i ContentRssFeed
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Active,
		&i.LastCrawledAt,
	)
	return i, err
}

const createRssItem = `-- name: CreateRssItem :one
insert into content.rss_items as i (
  rss_feed_id,
  rss_guid,
  title,
  link,
  content,
  published_at,
  remote_updated_at
) values ($1, $2, $3, $4, $5, $6, $7)
  on conflict (rss_feed_id, rss_guid) do update
  set
    title = excluded.title, 
    link = excluded.link, 
    content = excluded.content,
    published_at = excluded.published_at,
    remote_updated_at = excluded.remote_updated_at
  -- only perform insert if these values are changed, in order to avoid the
  -- rss_item_versions_insert_on_item_update trigger on updates to this table
  where
    i.title is distinct from excluded.title or 
    i.link is distinct from excluded.link or 
    i.content is distinct from excluded.content or
    i.published_at is distinct from excluded.published_at or
    i.remote_updated_at is distinct from excluded.remote_updated_at
  returning id, uuid, created_at, updated_at, rss_feed_id, rss_guid, title, link, content, published_at, remote_updated_at
`

type CreateRssItemParams struct {
	RssFeedID       int64        `json:"rss_feed_id"`
	RssGuid         string       `json:"rss_guid"`
	Title           string       `json:"title"`
	Link            string       `json:"link"`
	Content         string       `json:"content"`
	PublishedAt     sql.NullTime `json:"published_at"`
	RemoteUpdatedAt sql.NullTime `json:"remote_updated_at"`
}

func (q *Queries) CreateRssItem(ctx context.Context, arg CreateRssItemParams) (ContentRssItem, error) {
	row := q.db.QueryRowContext(ctx, createRssItem,
		arg.RssFeedID,
		arg.RssGuid,
		arg.Title,
		arg.Link,
		arg.Content,
		arg.PublishedAt,
		arg.RemoteUpdatedAt,
	)
	var i ContentRssItem
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RssFeedID,
		&i.RssGuid,
		&i.Title,
		&i.Link,
		&i.Content,
		&i.PublishedAt,
		&i.RemoteUpdatedAt,
	)
	return i, err
}

const createSubscription = `-- name: CreateSubscription :one
with inserted as (
  insert into content.rss_subscriptions (
    user_id,
    rss_feed_id
  ) select $1, $2 where not exists (
    select 1 from content.rss_subscriptions where user_id = $1 and rss_feed_id = $2
  ) returning id, uuid, created_at, updated_at, user_id, rss_feed_id, custom_title
) select id, uuid, created_at, updated_at, user_id, rss_feed_id, custom_title from inserted
  union
  select id, uuid, created_at, updated_at, user_id, rss_feed_id, custom_title from content.rss_subscriptions where user_id = $1 and rss_feed_id = $2
`

type CreateSubscriptionParams struct {
	UserID    int64 `json:"user_id"`
	RssFeedID int64 `json:"rss_feed_id"`
}

type CreateSubscriptionRow struct {
	ID          int64          `json:"id"`
	Uuid        uuid.UUID      `json:"uuid"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	UserID      int64          `json:"user_id"`
	RssFeedID   int64          `json:"rss_feed_id"`
	CustomTitle sql.NullString `json:"custom_title"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (CreateSubscriptionRow, error) {
	row := q.db.QueryRowContext(ctx, createSubscription, arg.UserID, arg.RssFeedID)
	var i CreateSubscriptionRow
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.RssFeedID,
		&i.CustomTitle,
	)
	return i, err
}

const findOrCreateRssFeed = `-- name: FindOrCreateRssFeed :one
with inserted as (
  insert into content.rss_feeds (
    title,
    url
  ) select $1, $2 where not exists (
    select 1 from content.rss_feeds where url = $2
  ) returning id, uuid, created_at, updated_at, title, url, active, last_crawled_at
) select id, uuid, created_at, updated_at, title, url, active, last_crawled_at from inserted
  union
  select id, uuid, created_at, updated_at, title, url, active, last_crawled_at from content.rss_feeds where url = $2
`

type FindOrCreateRssFeedParams struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

type FindOrCreateRssFeedRow struct {
	ID            int64        `json:"id"`
	Uuid          uuid.UUID    `json:"uuid"`
	CreatedAt     time.Time    `json:"created_at"`
	UpdatedAt     time.Time    `json:"updated_at"`
	Title         string       `json:"title"`
	Url           string       `json:"url"`
	Active        bool         `json:"active"`
	LastCrawledAt sql.NullTime `json:"last_crawled_at"`
}

func (q *Queries) FindOrCreateRssFeed(ctx context.Context, arg FindOrCreateRssFeedParams) (FindOrCreateRssFeedRow, error) {
	row := q.db.QueryRowContext(ctx, findOrCreateRssFeed, arg.Title, arg.Url)
	var i FindOrCreateRssFeedRow
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Active,
		&i.LastCrawledAt,
	)
	return i, err
}

const findRssFeed = `-- name: FindRssFeed :one
select id, uuid, created_at, updated_at, title, url, active, last_crawled_at from content.rss_feeds
where id = $1 limit 1
`

func (q *Queries) FindRssFeed(ctx context.Context, id int64) (ContentRssFeed, error) {
	row := q.db.QueryRowContext(ctx, findRssFeed, id)
	var i ContentRssFeed
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Active,
		&i.LastCrawledAt,
	)
	return i, err
}

const findRssFeedByUrl = `-- name: FindRssFeedByUrl :one
select id, uuid, created_at, updated_at, title, url, active, last_crawled_at from content.rss_feeds
where url = $1 limit 1
`

func (q *Queries) FindRssFeedByUrl(ctx context.Context, url string) (ContentRssFeed, error) {
	row := q.db.QueryRowContext(ctx, findRssFeedByUrl, url)
	var i ContentRssFeed
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Active,
		&i.LastCrawledAt,
	)
	return i, err
}

const findRssFeedByUuid = `-- name: FindRssFeedByUuid :one
select id, uuid, created_at, updated_at, title, url, active, last_crawled_at from content.rss_feeds
where uuid = $1 limit 1
`

func (q *Queries) FindRssFeedByUuid(ctx context.Context, uuid uuid.UUID) (ContentRssFeed, error) {
	row := q.db.QueryRowContext(ctx, findRssFeedByUuid, uuid)
	var i ContentRssFeed
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Active,
		&i.LastCrawledAt,
	)
	return i, err
}

const getQueueItemsByUserId = `-- name: GetQueueItemsByUserId :many
select rss_items.id, rss_items.uuid, rss_items.created_at, rss_items.updated_at, rss_feed_id, rss_guid, title, link, content, published_at, remote_updated_at, queue_items.id, queue_items.uuid, queue_items.created_at, queue_items.updated_at, user_id, rss_item_id, is_read from content.rss_items
  join content.queue_items on queue_items.rss_item_id = rss_items.id
  where queue_items.user_id = $1 limit $2
`

type GetQueueItemsByUserIdParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
}

type GetQueueItemsByUserIdRow struct {
	ID              int64         `json:"id"`
	Uuid            uuid.UUID     `json:"uuid"`
	CreatedAt       time.Time     `json:"created_at"`
	UpdatedAt       time.Time     `json:"updated_at"`
	RssFeedID       int64         `json:"rss_feed_id"`
	RssGuid         string        `json:"rss_guid"`
	Title           string        `json:"title"`
	Link            string        `json:"link"`
	Content         string        `json:"content"`
	PublishedAt     sql.NullTime  `json:"published_at"`
	RemoteUpdatedAt sql.NullTime  `json:"remote_updated_at"`
	ID_2            int64         `json:"id_2"`
	Uuid_2          uuid.UUID     `json:"uuid_2"`
	CreatedAt_2     time.Time     `json:"created_at_2"`
	UpdatedAt_2     time.Time     `json:"updated_at_2"`
	UserID          int64         `json:"user_id"`
	RssItemID       sql.NullInt64 `json:"rss_item_id"`
	IsRead          bool          `json:"is_read"`
}

// select * from content.queue_items where queue_items.user_id = $1 limit $2;
func (q *Queries) GetQueueItemsByUserId(ctx context.Context, arg GetQueueItemsByUserIdParams) ([]GetQueueItemsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getQueueItemsByUserId, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQueueItemsByUserIdRow
	for rows.Next() {
		var i GetQueueItemsByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RssFeedID,
			&i.RssGuid,
			&i.Title,
			&i.Link,
			&i.Content,
			&i.PublishedAt,
			&i.RemoteUpdatedAt,
			&i.ID_2,
			&i.Uuid_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.UserID,
			&i.RssItemID,
			&i.IsRead,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRssItemsByRssFeedId = `-- name: GetRssItemsByRssFeedId :many
select id, uuid, created_at, updated_at, rss_feed_id, rss_guid, title, link, content, published_at, remote_updated_at from content.rss_items where rss_items.rss_feed_id = $1 limit $2
`

type GetRssItemsByRssFeedIdParams struct {
	RssFeedID int64 `json:"rss_feed_id"`
	Limit     int32 `json:"limit"`
}

func (q *Queries) GetRssItemsByRssFeedId(ctx context.Context, arg GetRssItemsByRssFeedIdParams) ([]ContentRssItem, error) {
	rows, err := q.db.QueryContext(ctx, getRssItemsByRssFeedId, arg.RssFeedID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContentRssItem
	for rows.Next() {
		var i ContentRssItem
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RssFeedID,
			&i.RssGuid,
			&i.Title,
			&i.Link,
			&i.Content,
			&i.PublishedAt,
			&i.RemoteUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
