// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: rss_feeds.sql

package query

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRSSFeed = `-- name: CreateRSSFeed :one
insert into rss.feeds (title, url) values ($1, $2) returning id, uuid, created_at, updated_at, title, url, active, last_crawled_at
`

type CreateRSSFeedParams struct {
	Title string `json:"title"`
	URL   string `json:"url"`
}

func (q *Queries) CreateRSSFeed(ctx context.Context, arg CreateRSSFeedParams) (RSSFeed, error) {
	row := q.db.QueryRowContext(ctx, createRSSFeed, arg.Title, arg.URL)
	var i RSSFeed
	err := row.Scan(
		&i.ID,
		&i.UUID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.URL,
		&i.Active,
		&i.LastCrawledAt,
	)
	return i, err
}

const getOrCreateRSSFeed = `-- name: GetOrCreateRSSFeed :one
with inserted as (
  insert into rss.feeds (
    title,
    url
  ) select $1, $2 where not exists (
    select 1 from rss.feeds where url = $2
  ) returning id, uuid, created_at, updated_at, title, url, active, last_crawled_at
) select id, uuid, created_at, updated_at, title, url, active, last_crawled_at from inserted
  union
  select id, uuid, created_at, updated_at, title, url, active, last_crawled_at from rss.feeds where url = $2
`

type GetOrCreateRSSFeedParams struct {
	Title string `json:"title"`
	URL   string `json:"url"`
}

type GetOrCreateRSSFeedRow struct {
	ID            int64        `json:"id"`
	UUID          uuid.UUID    `json:"uuid"`
	CreatedAt     time.Time    `json:"created_at"`
	UpdatedAt     time.Time    `json:"updated_at"`
	Title         string       `json:"title"`
	URL           string       `json:"url"`
	Active        bool         `json:"active"`
	LastCrawledAt sql.NullTime `json:"last_crawled_at"`
}

func (q *Queries) GetOrCreateRSSFeed(ctx context.Context, arg GetOrCreateRSSFeedParams) (GetOrCreateRSSFeedRow, error) {
	row := q.db.QueryRowContext(ctx, getOrCreateRSSFeed, arg.Title, arg.URL)
	var i GetOrCreateRSSFeedRow
	err := row.Scan(
		&i.ID,
		&i.UUID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.URL,
		&i.Active,
		&i.LastCrawledAt,
	)
	return i, err
}

const getRSSFeed = `-- name: GetRSSFeed :one
select id, uuid, created_at, updated_at, title, url, active, last_crawled_at from rss.feeds
where id = $1 limit 1
`

func (q *Queries) GetRSSFeed(ctx context.Context, id int64) (RSSFeed, error) {
	row := q.db.QueryRowContext(ctx, getRSSFeed, id)
	var i RSSFeed
	err := row.Scan(
		&i.ID,
		&i.UUID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.URL,
		&i.Active,
		&i.LastCrawledAt,
	)
	return i, err
}

const getRSSFeedByURL = `-- name: GetRSSFeedByURL :one
select id, uuid, created_at, updated_at, title, url, active, last_crawled_at from rss.feeds
where url = $1 limit 1
`

func (q *Queries) GetRSSFeedByURL(ctx context.Context, url string) (RSSFeed, error) {
	row := q.db.QueryRowContext(ctx, getRSSFeedByURL, url)
	var i RSSFeed
	err := row.Scan(
		&i.ID,
		&i.UUID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.URL,
		&i.Active,
		&i.LastCrawledAt,
	)
	return i, err
}
