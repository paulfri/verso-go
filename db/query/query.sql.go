// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package query

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (title, url) VALUES ($1, $2)
RETURNING id, uuid, title, url, created_at, updated_at
`

type CreateFeedParams struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.Title, arg.Url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Title,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO items (
  feed_id,
  remote_id,
  title,
  link,
  content,
  published_at,
  remote_updated_at
) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, uuid, feed_id, remote_id, title, link, content, published_at, remote_updated_at, created_at, updated_at
`

type CreateItemParams struct {
	FeedID          int32        `json:"feed_id"`
	RemoteID        string       `json:"remote_id"`
	Title           string       `json:"title"`
	Link            string       `json:"link"`
	Content         string       `json:"content"`
	PublishedAt     sql.NullTime `json:"published_at"`
	RemoteUpdatedAt sql.NullTime `json:"remote_updated_at"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.FeedID,
		arg.RemoteID,
		arg.Title,
		arg.Link,
		arg.Content,
		arg.PublishedAt,
		arg.RemoteUpdatedAt,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.FeedID,
		&i.RemoteID,
		&i.Title,
		&i.Link,
		&i.Content,
		&i.PublishedAt,
		&i.RemoteUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedById = `-- name: GetFeedById :one
SELECT id, uuid, title, url, created_at, updated_at FROM feeds
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFeedById(ctx context.Context, id int32) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedById, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Title,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedByUuid = `-- name: GetFeedByUuid :one
SELECT id, uuid, title, url, created_at, updated_at FROM feeds
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetFeedByUuid(ctx context.Context, uuid uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByUuid, uuid)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Title,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFeeds = `-- name: ListFeeds :many
SELECT id, uuid, title, url, created_at, updated_at FROM feeds
`

func (q *Queries) ListFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Title,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
